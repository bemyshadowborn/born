App.js

import React from 'react';
import './App.css';
import Form from './Form';

function App() {
  return (
    <div className="App">
      <h1>React Form Validation</h1>
      <Form />
    </div>
  );
}

Form.js

export default App;
import React, { useState } from 'react';

const Form = () => {
  // State to store form data
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: ''
  });

  // State to store error messages
  const [errors, setErrors] = useState({
    name: '',
    email: '',
    password: ''
  });

  // State to store submitted data
  const [submittedData, setSubmittedData] = useState(null);

  // State to toggle password visibility
  const [showPassword, setShowPassword] = useState(false);

  // Handle input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  // Toggle password visibility
  const togglePassword = () => {
    setShowPassword(!showPassword);
  };

  // Validate the form data
  const validateForm = () => {
    let valid = true;
    let errors = {};

    // Name validation
    if (!formData.name) {
      errors.name = 'Name is required';
      valid = false;
    }

    // Email validation (basic email format check)
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
    if (!formData.email) {
      errors.email = 'Email is required';
      valid = false;
    } else if (!emailPattern.test(formData.email)) {
      errors.email = 'Invalid email format';
      valid = false;
    }

    // Password validation (minimum length check)
    if (!formData.password) {
      errors.password = 'Password is required';
      valid = false;
    } else if (formData.password.length < 6) {
      errors.password = 'Password must be at least 6 characters';
      valid = false;
    }

    setErrors(errors);
    return valid;
  };

  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();

    if (validateForm()) {
      // Store the submitted data in state
      setSubmittedData(formData);
      //console.log('Form data submitted:', formData); // Check in the browser console
    }
  };

  return (
    <div>
      <form onSubmit={handleSubmit}>
        <div>
          <label htmlFor="name">Name:</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleInputChange}
            style={{ borderColor: errors.name ? 'red' : 'black' }}
          />
          {errors.name && <p style={{ color: 'red' }}>{errors.name}</p>}
        </div>

        <div>
          <label htmlFor="email">Email:</label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleInputChange}
            style={{ borderColor: errors.email ? 'red' : 'black' }}
          />
          {errors.email && <p style={{ color: 'red' }}>{errors.email}</p>}
        </div>

        <div>
          <label htmlFor="password">Password:</label>
          <input
            type={showPassword ? 'text' : 'password'}
            id="password"
            name="password"
            value={formData.password}
            onChange={handleInputChange}
            style={{ borderColor: errors.password ? 'red' : 'black' }}
          />
          <button type="button" onClick={togglePassword}>
            {showPassword ? 'Hide Password' : 'Show Password'}
          </button>
          {errors.password && <p style={{ color: 'red' }}>{errors.password}</p>}
        </div>

        <button type="submit">Submit</button>
      </form>

      {/* Display Submitted Data */}
      {submittedData && (
        <div>
          <h3>Submitted Data:</h3>
          <p>Name: {submittedData.name}</p>
          <p>Email: {submittedData.email}</p>
          <p>Password: {submittedData.password}</p>
        </div>
      )}
    </div>
  );
};
export default Form;

App.css

.App {
    text-align: center;
    font-family: Arial, sans-serif;
    padding: 20px;
}

form {
    max-width: 400px;
    margin: 0 auto;
}

div {
    margin-bottom: 10px;
}

input {
    width: 100%;
    padding: 8px;
    margin-top: 5px;
}

button {
    padding: 10px 20px;
    background-color: #808080;
    color: white;
    border: none;
    cursor: pointer;
    margin-top: 10px;
    
}

button[type='button'] {
        margin-left: 10px;

    }
button:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }
p {
    margin: 0;
    font-size: 14px;
}
